import re
import requests

# Retrieve CSV data from URLhaus
r = requests.get('https://urlhaus.abuse.ch/downloads/csv_recent/').text.split('\n')

append_target = []

# Regular expressions for pattern matching
pattern_url = r'(http://\S+)","(online)",(.*),"http'
pattern_type = r'malware_download","(.*)"'

# Process CSV data to extract relevant information
for data in r:
    matches = re.findall(pattern_url, data)
    for match in matches:
        type_info = re.findall(pattern_type, match[2])[0]
        m = f'LINK=http://{match[0].replace("http://", "").split("/")[0]} PATH=/{match[0].replace("http://", "").split("/")[1]} TYPE={type_info} STATUS={match[1]}'
        if m not in append_target:
            append_target.append(m)

print(f'Downloads found: {len(append_target)}')

# Function to check if a given type matches a malware type
def is_malware_type(malware_type, target_types):
    malware_type = malware_type.lower()
    for t in target_types:
        if malware_type in t.lower():
            return True
    return False

# Prompt user to input malware type and filter matching results
while True:
    find = []
    input_type = input("Enter malware type to search for (e.g., 'loader'): ").strip().lower()
    count_found = 0
    
    for target in append_target:
        c = 0
        parts = target.split(' t')
        if parts[3].replace('STATUS=', '') == 'online':
            target_types = parts[2].replace('TYPE=', '').split(',')
            if is_malware_type(input_type, target_types):
                link = parts[0].replace('LINK=', '')
                if link not in find:
                    print(target)
                    find.append(link)
                    count_found += 1
                    c = 1
            if c == 0:
                for s in target_types:
                    t = s.replace('-',' ').split(' ')
                    count = 0
                    while True:
                        try:
                            if input_type in t[count].lower() or input_type == t[count].lower():
                                print(target); count_found += 1; c = 1; break
                        except:break
                        count += 1
    
    print(f"Found {count_found} matching {input_type} from {len(append_target)} downloads.")
